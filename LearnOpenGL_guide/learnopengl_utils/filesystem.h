#ifndef FILESYSTEM_H
#define FILESYSTEM_H
#define _CRT_SECURE_NO_WARNINGS

#include <string>
#include <cstdlib>
//#include "root_directory.h" // This is a configuration file generated by CMake.
char const* logl_root = ".";

class FileSystem
{
private:
  typedef std::string(*Builder) (const std::string& path);

public:
  static std::string getPath(const std::string& path)
  {
    static std::string(*pathBuilder)(std::string const&) = getPathBuilder();
    return (*pathBuilder)(path);
  }

private:
  static std::string const& getRoot()
  {
    //static char const* envRoot = getenv("LOGL_ROOT_PATH");
    size_t bufCount;
    char* envRoot;
    errno_t err = _dupenv_s(&envRoot, &bufCount, "LOGL_ROOT_PATH");
    static char const* givenRoot = (envRoot != nullptr ? envRoot : logl_root);
    static std::string root = (givenRoot != nullptr ? givenRoot : "");

    delete envRoot;
    return root;
  }

  //static std::string(*foo (std::string const &)) getPathBuilder()
  static Builder getPathBuilder()
  {
    if (getRoot() != "")
      return &FileSystem::getPathRelativeRoot;
    else
      return &FileSystem::getPathRelativeBinary;
  }

  static std::string getPathRelativeRoot(const std::string& path)
  {
    return getRoot() + std::string("/") + path;
  }

  static std::string getPathRelativeBinary(const std::string& path)
  {
    return "../../../" + path;
  }


};

// FILESYSTEM_H
#endif